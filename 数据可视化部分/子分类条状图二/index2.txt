<!DOCTYPE html>
<meta charset="utf-8">
<html>
<head>
<style>

text {
  font: 13px sans-serif;
  
}
 
rect.background {
  fill: darkgrey;
}

.axis {
  shape-rendering: crispEdges;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  background-color:aliceblue;
}

div {
		
}
#left{
	position: fixed;
	padding: 10px;
	padding-top: 14px;
	left: 1px;
}

input{
			/*此处设置的是bottom按钮的性质属性*/
		}
		.one{
			font-size: 16px;
			position: absolute;
			width: 90%;
			background-color: beige;
			border-radius: 5px;
			-webkit-border-radius: 5px;
			-moz-border-border-radius: 5px;
			border: none;
			padding: 15px 30px 15px 30px;
			color: slategray;
			bottom: 65px;
		}
		.two{
			font-size: 16px;
			position: absolute;
			width: 90%;
			background-color: beige;
			border-radius: 5px;
			-webkit-border-radius: 5px;
			-moz-border-border-radius: 5px;
			border: none;
			padding: 15px 30px 15px 30px;
			color: slategray;
			bottom: 8px;
		}

</style>
</head>

<div id="left" style="width:17%; float:left; background-color:lightgrey; border-radius: 5px;">
	<text>
		本图表示了生物分类和关注量标准差的关系，研究物种对波动性的影响。
		图表同过对热度标准差的计算，在不考虑人们对人设喜好上的相关性的情况下。<br/>
		首先从生物学层面进行大致上的分类，然后在该框架下进行大众对人物喜好程度的研究。<br/>
		波动程度大的样本群，体现以下情况：<br/>
		1.样本本身属于巨大的数据源，该人设更容易在社会上产生同人作品等衍生品；
		2.观众来源更多，导致对人物的看法差别更大，说明这部分人物所在的作品给人的印象更深；
		3.这一类以哺乳动物动物为主，从数据分析看，人们对哺乳类，尤其是对猫科、犬科的拟人角色有更高的关注度；<br/>
		特殊情况：对于一些啮齿科、雁型科的拟人化角色，虽然种类偏少、角色单一化，但是数据源任然很多，导致样本热度值的波动很大。
		这有可能与人物本身的著名度有关，而且相关作品产生依赖的历史也更长。<br/><br/><br/><br/><br/><br/>
		<input class="one" type="button" value="进入主要人物的详细分析" onclick="Oneclick()"><br/>
		<input class="two" type="button" value="回到首页" onclick="Twoclick()">
	</text>
</div>

<body>

<div id="right" style="width:80%; float:right; background-color:beige; border-radius: 5px; right: 20px;">
<new>

<script>//-----------------------------------------------------------按钮触发的链接函数
		function Oneclick(){
			window.location.assign("index01.html")
		}
		function Twoclick(){
			window.location.assign("index.html")
		}
</script>

<script src="//d3js.org/d3.v3.min.js"></script>
<script>

var margin = {top: 30, right: 320, bottom: 0, left: 200},
    width = 1360 - margin.left - margin.right,
    height = 560 - margin.top - margin.bottom;

var x = d3.scale.linear()
    .range([0, width]);

var barHeight = 20;

var color = d3.scale.ordinal()
    .range(["beige", "gray"]);

var duration = 750,
    delay = 25;

var partition = d3.layout.partition()
    .value(function(d) { return d.size; });

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("top");

var svg = d3.select("new").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

svg.append("rect")
    .attr("class", "background")
    .attr("width", width)
    .attr("height", height)
	.attr("background-color","beige")
    .on("click", up);

svg.append("g")
    .attr("class", "x axis");

svg.append("g")
    .attr("class", "y axis")
  .append("line")
    .attr("y1", "100%");

d3.json("readme2.json", function(error, root) {
  if (error) throw error;

  partition.nodes(root);
  x.domain([0, root.value]).nice();
  down(root, 0);
});

function down(d, i) {
  if (!d.children || this.__transition__) return;
  var end = duration + d.children.length * delay;

  //
  var exit = svg.selectAll(".enter")
      .attr("class", "exit");

  //
  exit.selectAll("rect").filter(function(p) { return p === d; })
      .style("fill-opacity", 1e-6);

  // 
  var enter = bar(d)
      .attr("transform", stack(i))
      .style("opacity", 1);

  //
  enter.select("text").style("fill-opacity", 1e-6);
  enter.select("rect").style("fill", color(true));

  //
  x.domain([0, d3.max(d.children, function(d) { return d.value; })]).nice();

  //
  svg.selectAll(".x.axis").transition()
      .duration(duration)
      .call(xAxis);

  //
  var enterTransition = enter.transition()
      .duration(duration)
      .delay(function(d, i) { return i * delay; })
      .attr("transform", function(d, i) { return "translate(0," + barHeight * i * 1.2 + ")"; });

  //
  enterTransition.select("text")
      .style("fill-opacity", 1);

  //
  enterTransition.select("rect")
      .attr("width", function(d) { return x(d.value); })
      .style("fill", function(d) { return color(!!d.children); });

  //
  var exitTransition = exit.transition()
      .duration(duration)
      .style("opacity", 1e-6)
      .remove();

  //
  exitTransition.selectAll("rect")
      .attr("width", function(d) { return x(d.value); });

  //
  svg.select(".background")
      .datum(d)
    .transition()
      .duration(end);

  d.index = i;
}

function up(d) {
  if (!d.parent || this.__transition__) return;
  var end = duration + d.children.length * delay;

  //
  var exit = svg.selectAll(".enter")
      .attr("class", "exit");

  //
  var enter = bar(d.parent)
      .attr("transform", function(d, i) { return "translate(0," + barHeight * i * 1.2 + ")"; })
      .style("opacity", 1e-6);

  //
  enter.select("rect")
      .style("fill", function(d) { return color(!!d.children); })
    .filter(function(p) { return p === d; })
      .style("fill-opacity", 1e-6);

  //
  x.domain([0, d3.max(d.parent.children, function(d) { return d.value; })]).nice();

  //
  svg.selectAll(".x.axis").transition()
      .duration(duration)
      .call(xAxis);

  //
  var enterTransition = enter.transition()
      .duration(end)
      .style("opacity", 1);

  //
  enterTransition.select("rect")
      .attr("width", function(d) { return x(d.value); })
      .each("end", function(p) { if (p === d) d3.select(this).style("fill-opacity", null); });

  // Transition exiting bars to the parent's position.
  var exitTransition = exit.selectAll("g").transition()
      .duration(duration)
      .delay(function(d, i) { return i * delay; })
      .attr("transform", stack(d.index));

  //
  exitTransition.select("text")
      .style("fill-opacity", 1e-6);

  //
  exitTransition.select("rect")
      .attr("width", function(d) { return x(d.value); })
      .style("fill", color(true));

  // Remove exiting nodes when the last child has finished transitioning.
  exit.transition()
      .duration(end)
      .remove();

  //
  svg.select(".background")
      .datum(d.parent)
    .transition()
      .duration(end);
}

//
function bar(d) {
  var bar = svg.insert("g", ".y.axis")
      .attr("class", "enter")
      .attr("transform", "translate(0,5)")
    .selectAll("g")
      .data(d.children)
    .enter().append("g")
      .style("cursor", function(d) { return !d.children ? null : "pointer"; })
      .on("click", down);

  bar.append("text")
      .attr("x", -6)
      .attr("y", barHeight / 2)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return d.name; });

  bar.append("rect")
      .attr("width", function(d) { return x(d.value); })
      .attr("height", barHeight);

  return bar;
}

//
function stack(i) {
  var x0 = 0;
  return function(d) {
    var tx = "translate(" + x0 + "," + barHeight * i * 1.2 + ")";
    x0 += x(d.value);
    return tx;
  };
}

</script>
</new>
</div>

</html>